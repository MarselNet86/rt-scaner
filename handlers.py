from app import keyboards as kb
from app.parser import convert_data, calculate_city
from main import bot, dp
from app import database as db
from aiogram.types import Message
from aiogram import types
import os


@dp.message_handler(commands=['start', 'user'])
async def start(message: Message):
    await db.user_exists(message.from_user.id)
    await message.answer('üëã–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', reply_markup=kb.main_menu)


@dp.message_handler(lambda message: message.text in ['‚úÖ–í–∫–ª—é—á–∏—Ç—å', '‚ùå–í—ã–∫–ª—é—á–∏—Ç—å'])
async def switcher_handler(message: types.Message):
    if message.text == '‚úÖ–í–∫–ª—é—á–∏—Ç—å':
        await db.switch_notice(message.from_user.id, 'on')
        await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æüéâ', reply_markup=kb.notice_off)

    elif message.text == '‚ùå–í—ã–∫–ª—é—á–∏—Ç—å':
        await db.switch_notice(message.from_user.id, 'off')
        await message.answer('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æüéâ', reply_markup=kb.notice_on)


@dp.message_handler(content_types=['text'])
async def user_buttons(message: Message):
    if message.text == '–í—Å–µ':
        await handle_data_request(message, 'all')
    elif message.text == '–ë–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è':
        await handle_data_request(message, 'unexecuted')

    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
        if await db.check_notice(message.from_user.id) == 1:
            await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. '
                                 '\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - ‚û°–í–∫–ª—é—á–µ–Ω—ã', reply_markup=kb.notice_off)

        else:
            await message.answer('–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. '
                                 '\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - ‚û°–í—ã–∫–ª—é—á–µ–Ω—ã', reply_markup=kb.notice_on)

    elif message.text == 'üîô–ù–∞–∑–∞–¥':
        await message.answer('–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=kb.main_menu)

    else:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=kb.main_menu)


async def handle_data_request(message: Message, request_type: str):
    try:
        sent_message = await message.answer('–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∂–∏–¥–∞–π—Ç–µ. '
                                            '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥')
        file_path = convert_data(request_type)
        text = calculate_city()

        await bot.edit_message_text(f'–ì–æ—Ç–æ–≤–æ ‚úÖ',
                                    message.chat.id, message_id=sent_message.message_id)

        with open(file_path, 'rb') as file:
            await message.reply_document(file)
            if request_type == 'all':
                await message.answer(text)

        if os.path.isfile(file_path):
            os.remove(file_path)
        else:
            print('File path is not a file')

    except Exception as e:
        raise Exception(f"Err: {e}")